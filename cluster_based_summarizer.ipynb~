{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n",
      "/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n",
      "/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n",
      "/usr/lib/python3.5/importlib/_bootstrap.py:222: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "from news_classes import *\n",
    "import math\n",
    "from textblob import TextBlob as tb\n",
    "import os\n",
    "import pickle\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "idf_path='bdnews_idfblob_19_18.pkl'\n",
    "with open(idf_path, 'rb') as input:\n",
    "    idfblob = pickle.load(input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tf(word, blob):\n",
    "    return blob.words.count(word) / len(blob.words)\n",
    "\n",
    "def idf(word):\n",
    "    return math.log(idfblob.size() / (1 + idfblob.getIdf(word)))\n",
    "\n",
    "def tfidf(word, blob):\n",
    "    return tf(word, blob) * idf(word)\n",
    "\n",
    "def sentence_tfidf(sent_blob, para_blob):    \n",
    "    tot=0;\n",
    "    for word in sent_blob.words:\n",
    "        tot+=tfidf(word,para_blob)\n",
    "    \n",
    "    return tot/len(sent_blob.words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sent_idfs(para):\n",
    "    sentences=tb(para).lower().sentences\n",
    "    \n",
    "    sent_tfidf=[]\n",
    "    for sentence in sentences:\n",
    "        sent_tfidf.append(sentence_tfidf(sentence, tb(para).lower()))\n",
    "    \n",
    "    return sent_tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def summarize(para):\n",
    "    sent_idfs=get_sent_idfs(para)\n",
    "    \n",
    "    X1 = np.array(sent_idfs)\n",
    "    X1=X1.reshape(-1,1)\n",
    "    X2 = np.zeros((len(X1),1))\n",
    "    X = np.hstack((X1,X2))\n",
    "    \n",
    "    cluster_size=len(X)//2\n",
    "    kmeans = KMeans(n_clusters=cluster_size, random_state=0).fit(X)\n",
    "    \n",
    "    counter={}\n",
    "    n=len(X)\n",
    "    for i in range(cluster_size):\n",
    "        counter[i]=0\n",
    "    for i in range(n):\n",
    "        counter[kmeans.labels_[i]]+=1\n",
    "    mx=0\n",
    "    for i in range(cluster_size):\n",
    "        if counter[i]>counter[mx]:\n",
    "            mx=i\n",
    "            \n",
    "    try:        \n",
    "        sentences=tb(para).sentences\n",
    "        print(str(len(kmeans.labels_))+\" \"+str(len(sent_idfs))) \n",
    "        \n",
    "        summarized_para=\"\"\n",
    "        for i in range(len(sentences)):\n",
    "            if kmeans.labels_[i] == mx:\n",
    "                summarized_para+=(str(sentences[i])+\" \")\n",
    "    except:\n",
    "        summarized_para=\"nothing\"\n",
    "        \n",
    "    return summarized_para"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 11\n",
      "It might seem that our partnership was more crucial, but it is not easy to tackle six balls without giving away eight runs. “The Afghans also fought well and we managed to keep ourselves in the game thanks to his bowling. We also thank him for soldiering through on the field despite the pain.” \n"
     ]
    }
   ],
   "source": [
    "para=\"Mustafiz, the left-arm Bangladeshi pacer, conceded only four runs off the final over, where Afghanistan had needed eight runs, keeping Bangladesh’s hopes alive in the Asia Cup. Mustafiz contributed a lot by facing the danger at the tail end, but Mahmudullah also had a significant hand in the achievement. He had steadied the team with a 128-run partnership with left-handed Imrul Kayes after the team lost 5 wickets in 87 runs. Not only did Mahmudullah shine with the bat, he also broke the Shahidi-Shahzad partnership in in the 25th over and caught Afghan captain Asghar Afghan off with the bowling of Bangladesh captain Mashrafe Bin Mortaza. But Mahmudullah focused on Mustafiz’s bowling in the final over of the match and heaped praise on him for his nerve. “It was a turning point for us. It might seem that our partnership was more crucial, but it is not easy to tackle six balls without giving away eight runs. But the way Mustafiz bowled was excellent.” Mahmudullah also praised Mustafiz for overcoming other difficulties. He said Mustafiz had been suffering from cramps in his legs due to the terrific heat during the match. “The Afghans also fought well and we managed to keep ourselves in the game thanks to his bowling. We also thank him for soldiering through on the field despite the pain.”\"\n",
    "print(summarize(para))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "cwd=os.getcwd()+'/'\n",
    "news_path='bdnews_news_19_18.pkl'\n",
    "\n",
    "with open(news_path, 'rb') as input:\n",
    "    allnews = pickle.load(input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getNewsFromKey(searched_word):\n",
    "    short_news=[]\n",
    "    for paragraph in allnews.paragraphs:\n",
    "        if searched_word in paragraph.title.lower():\n",
    "            news={'title':paragraph.title, 'url':paragraph.url, 'text':summarize(paragraph.body)}\n",
    "            short_news.append(news)\n",
    "    return short_news"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15 15\n",
      "17 16\n",
      "17 16\n",
      "13 13\n",
      "5 5\n",
      "16 14\n",
      "11 9\n",
      "28 27\n",
      "8 8\n",
      "13 12\n",
      "9 9\n",
      "25 25\n",
      "4 4\n",
      "18 17\n",
      "22 21\n",
      "18 17\n"
     ]
    }
   ],
   "source": [
    "arr = getNewsFromKey('khaleda')\n",
    "\n",
    "#for i in arr:\n",
    "#    print(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "k=5\n",
    "abul={'name':'abul','age':k}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'age': 5, 'name': 'abul'}\n"
     ]
    }
   ],
   "source": [
    "print(abul)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
